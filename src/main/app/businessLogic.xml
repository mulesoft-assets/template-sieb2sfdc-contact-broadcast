<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:siebel="http://www.mulesoft.org/schema/mule/siebel" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" version="EE-3.5.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/siebel http://www.mulesoft.org/schema/mule/siebel/current/mule-siebel.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <data-mapper:config name="Contact_Contact_To_Contact" transformationGraphPath="contact.contact_to_contact.grf" doc:name="Contact_Contact_To_Contact"/>
    
    <batch:job name="syncContactsBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>

        <batch:process-records>
            <batch:step name="getContactInSalesforceStep">

                <enricher source="#[payload]" target="#[recordVars['contactInB']]" doc:name="Message Enricher">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id FROM Contact WHERE Email = '#[payload[&quot;Email Address&quot;]]'" doc:name="Query Salesforce for existing Contact"/>
                </enricher>

            </batch:step>
            <batch:step name="findOrCreateAccountInSalesforceStep" accept-expression="payload['Account'] != ''" accept-policy="ALL">

                
                <enricher doc:name="store result in 'accountInTargetInstance'" source="#[payload]" target="#[recordVars['accountInTargetInstance']]">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id,Name from Account where Name = '#payload[&quot;Account&quot;]'" doc:name="Query Salesforce for existing Account"/>

                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[recordVars['accountInTargetInstance'] is NullPayload]">
                        <enricher source="#[payload]" target="#[recordVars['idOfAccountInTargetInstance']]" doc:name="store id of account in target instance">
                            <processor-chain doc:name="Processor Chain">
                                <expression-component doc:name="prepare account for creation"><![CDATA[String name = payload['Account'];
payload['Account'] = new java.util.HashMap();
payload['Account'].put('Name', name);
payload['Account'].put('NumberOfEmployees', payload['Account']['NumberOfEmployees'] == null ? 0 :  Integer.parseInt(payload['Account']['NumberOfEmployees']));]]></expression-component>
                                <set-payload value="#[ [payload['Account']]]" doc:name="set payload with account to be created"/>
                                <sfdc:create config-ref="Salesforce" type="Account" doc:name="create account in B instance">
                                    <sfdc:objects ref="#[payload]"/>
                                </sfdc:create>

																	  
                                <expression-transformer expression="#[payload[0].getId()]" doc:name="get the id of the account created"/>
                            </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher source="#[payload]" target="#[recordVars['idOfAccountInTargetInstance']]" doc:name="store id of account in B">
                            <expression-transformer expression="#[recordVars['accountInTargetInstance']['Id']]" doc:name="get the id of the account in target"/>
                        </enricher>

                    </otherwise>
                </choice>

            </batch:step>
            <batch:step name="forEachContactUpsertInSalesforceStep">

            	<data-mapper:transform doc:name="Contact.Contact To Contact" config-ref="Contact_Contact_To_Contact"/>
                <expression-component doc:name="set contact's parent account id"><![CDATA[payload.put('AccountId', recordVars['idOfAccountInTargetInstance']);

if (recordVars['contactInB'] instanceof NullPayload){  
  	payload.remove('Id');  
  }  
  else {  
  	payload.put('Id', recordVars['contactInB']['Id']);  
  }]]></expression-component>
                <batch:commit doc:name="Batch Commit" size="200">
                    <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="Contact" doc:name="upsert Contact in Salesforce">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="after upsert: #[payload]" level="INFO" doc:name="log result"/>
                </batch:commit>

            </batch:step>
            
        </batch:process-records>
        <batch:on-complete>
            <logger message="batch completed #[payload]" level="INFO" doc:name="log batch completed"/>
        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow" doc:name="mainFlow" doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
        <batch:execute name="syncContactsBatch" doc:name="Batch Execute"/>

        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
</mule>
